#!/bin/bash

# For the license, see the LICENSE file in the root directory.
#set -x

type -p nvdefinespace startup &>/dev/null
if [ $? -ne 0 ]; then
	echo "Could not find TPM2 tools (e.g., startup, nvdefinespace) in PATH."
	exit 77
fi

DIR=$(dirname "$0")
ROOT=${DIR}/..
SWTPM=swtpm
SWTPM_EXE=$ROOT/src/swtpm/$SWTPM
SWTPM_IOCTL=$ROOT/src/swtpm_ioctl/swtpm_ioctl
TPMDIR=`mktemp -d`
PID_FILE=$TPMDIR/${SWTPM}.pid
SOCK_PATH=$TPMDIR/sock
CMD_PATH=$TPMDIR/cmd
RESP_PATH=$TPMDIR/resp
LOGFILE=$TPMDIR/logfile
VOLATILESTATE=$TPMDIR/volatile
TMPFILE=$TPMDIR/tmpfile

source ${DIR}/test_common

trap "cleanup" SIGTERM EXIT

function cleanup()
{
	rm -rf $TPMDIR
	# remove files from tss tools
	rm -f h01*.bin nvp*.bin
	if [ -n "$PID" ]; then
		kill -SIGTERM $PID 2>/dev/null
	fi
}

function test_nvram_state()
{
	local create="$1"
	local check="$2"

	local i res rc

	if [ $create -eq 1 ]; then
		for ((i=0; i < 10; i++)); do
			printf "Creating NVRAM location 01%06x\n" $i
			nvdefinespace \
				-ha $(printf "01%06x" $i) \
				-sz $((100 + i * 10)) \
				-pwdn nnn \
				+at wst \
				-hi o >/dev/null
			if [ $? -ne 0 ]; then
				echo "Error: nvdefinespace failed for i = $i."
				exit 1
			fi

			nvwrite \
				-ha $(printf "01%06x" $i) \
				-ic "Hello TPM2" \
				-pwdn nnn
			if [ $? -ne 0 ]; then
				echo "Error: nwrite failed for i = $i."
				exit 1
			fi

			nvwritelock \
				-ha $(printf "01%06x" $i) \
				-pwdn nnn
			if [ $? -ne 0 ]; then
				echo "Error: nwritelock failed for i = $i."
				exit 1
			fi
		done
	fi

	if [ $check -eq 1 ]; then
		for ((i=0; i < 10; i++)); do
			printf "Checking NVRAM location 01%06x\n" $i
			nvread \
				-ha $(printf "01%06x" $i) \
				-pwdn nnn \
				-sz 10 > $TMPFILE
			if [ $? -ne  0 ]; then
				echo "Error: nvread failed for i = $i"
				cat $TMPFILE
				exit 1
			fi

			# we want one line with xdigits and spaces
			res=$(cat $TMPFILE | \
				grep -E "^[ [:xdigit:]]+$" |
				wc -l)
			if [ $res -ne 1 ]; then
				echo "Error: nvread did not show expected results"
				cat $TMPFILE
			fi

			#nvwrite \
			#	-ha $(printf "01%06x" $i) \
			#	-ic "Hello TPM2" \
			#	-pwdn nnn > $TMPFILE
			#rc=$?
			#if [ $rc -eq 0 ]; then
			#	echo "Error: nwrite succeeded for i = $i."
			#	exit 1
			#fi
		done
	fi
}

export TPM_SERVER_TYPE=raw
export TPM_COMMAND_PORT=65533

$SWTPM_EXE socket \
	--server port=${TPM_COMMAND_PORT} \
	--tpmstate dir=$TPMDIR \
	--pid file=$PID_FILE \
	--ctrl type=unixio,path=$SOCK_PATH \
	--log file=$LOGFILE,level=20 \
	--tpm2 &

if wait_for_file $PID_FILE 3; then
	echo "Error: Chardev TPM did not write pidfile."
	exit 1
fi

PID="$(cat $PID_FILE)"

# Send TPM_Init
act=$($SWTPM_IOCTL --unix $SOCK_PATH -i 2>&1)
if [ $? -ne 0 ]; then
	echo "Error: $SWTPM_IOCTL CMD_INIT failed: $act"
	exit 1
fi

startup -c
if [ $? -ne 0 ]; then
	echo "Error: tpm_startup clear failed."
	exit 1
fi

test_nvram_state 1 1

# Send Shutdown
act=$($SWTPM_IOCTL --unix $SOCK_PATH -s 2>&1)
if [ $? -ne 0 ]; then
	echo "Error: $SWTPM_IOCTL CMD_SHUTDOWN failed: $act"
	exit 1
fi

echo "============================" >> $LOGFILE

echo "TPM was shut down"

# Store this state for later usage
#cp $TPMDIR/tpm2-00.permall ${DIR}/data/tpm2state3

#################################################################
# Run TPM2 with the created state and verify it's the same

$SWTPM_EXE socket \
	--server port=${TPM_COMMAND_PORT} \
	--tpmstate dir=$TPMDIR \
	--pid file=$PID_FILE \
	--ctrl type=unixio,path=$SOCK_PATH \
	--log file=$LOGFILE,level=20 \
	--tpm2 &

if wait_for_file $PID_FILE 3; then
	echo "Error: Chardev TPM did not write pidfile."
	exit 1
fi

echo "TPM re-started"

PID="$(cat $PID_FILE)"

# Send TPM_Init
act=$($SWTPM_IOCTL --unix $SOCK_PATH -i 2>&1)
if [ $? -ne 0 ]; then
	echo "Error: $SWTPM_IOCTL CMD_INIT failed: $act"
	exit 1
fi

startup -c
if [ $? -ne 0 ]; then
	echo "Error: tpm_startup clear failed."
	cat $LOGFILE
	exit 1
fi

test_nvram_state 0 1

# Send Shutdown
act=$($SWTPM_IOCTL --unix $SOCK_PATH -s 2>&1)
if [ $? -ne 0 ]; then
	echo "Error: $SWTPM_IOCTL CMD_SHUTDOWN failed: $act"
	exit 1
fi

echo "============================" >> $LOGFILE

echo "TPM was shut down"

#################################################################
# Run TPM2 with previously saved state and verify it's the same

rm -f $TPMDIR/*
cp -f ${DIR}/data/tpm2state3/tpm2-00.permall $TPMDIR/tpm2-00.permall

$SWTPM_EXE socket \
	--server port=${TPM_COMMAND_PORT} \
	--tpmstate dir=$TPMDIR \
	--pid file=$PID_FILE \
	--ctrl type=unixio,path=$SOCK_PATH \
	--log file=$LOGFILE,level=20 \
	--tpm2 &

if wait_for_file $PID_FILE 3; then
	echo "Error: Chardev TPM did not write pidfile."
	exit 1
fi

echo "TPM started with previously generated state"

PID="$(cat $PID_FILE)"

# Send TPM_Init
act=$($SWTPM_IOCTL --unix $SOCK_PATH -i 2>&1)
if [ $? -ne 0 ]; then
	echo "Error: $SWTPM_IOCTL CMD_INIT failed: $act"
	exit 1
fi

startup -c
if [ $? -ne 0 ]; then
	echo "Error: tpm_startup clear failed."
	cat $LOGFILE
	exit 1
fi

test_nvram_state 0 1

# Send Shutdown
act=$($SWTPM_IOCTL --unix $SOCK_PATH -s 2>&1)
if [ $? -ne 0 ]; then
	echo "Error: $SWTPM_IOCTL CMD_SHUTDOWN failed: $act"
	exit 1
fi

echo "OK"

exit 0
